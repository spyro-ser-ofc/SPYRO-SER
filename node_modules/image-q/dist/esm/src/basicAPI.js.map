{"version":3,"file":"basicAPI.js","sourceRoot":"","sources":["../../../src/basicAPI.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * helper.ts - part of Image Quantization Library\n */\nimport * as distance from './distance';\nimport * as image from './image';\nimport * as palette from './palette';\nimport { AbstractDistanceCalculator } from './distance/distanceCalculator';\nimport { PointContainer } from './utils/pointContainer';\nimport { Palette } from './utils/palette';\n\nconst setImmediateImpl =\n  typeof setImmediate === 'function'\n    ? setImmediate\n    : typeof process !== 'undefined' && typeof process?.nextTick === 'function'\n    ? (callback: () => void) => process.nextTick(callback)\n    : (callback: () => void) => setTimeout(callback, 0);\n\nexport type ColorDistanceFormula =\n  | 'cie94-textiles'\n  | 'cie94-graphic-arts'\n  | 'ciede2000'\n  | 'color-metric'\n  | 'euclidean'\n  | 'euclidean-bt709-noalpha'\n  | 'euclidean-bt709'\n  | 'manhattan'\n  | 'manhattan-bt709'\n  | 'manhattan-nommyde'\n  | 'pngquant';\n\nexport type PaletteQuantization =\n  | 'neuquant'\n  | 'neuquant-float'\n  | 'rgbquant'\n  | 'wuquant';\n\nexport type ImageQuantization =\n  | 'nearest'\n  | 'riemersma'\n  | 'floyd-steinberg'\n  | 'false-floyd-steinberg'\n  | 'stucki'\n  | 'atkinson'\n  | 'jarvis'\n  | 'burkes'\n  | 'sierra'\n  | 'two-sierra'\n  | 'sierra-lite';\n\nexport interface ProgressOptions {\n  onProgress?: (progress: number) => void;\n}\n\nexport interface ApplyPaletteOptions {\n  colorDistanceFormula?: ColorDistanceFormula;\n  imageQuantization?: ImageQuantization;\n}\n\nexport interface BuildPaletteOptions {\n  colorDistanceFormula?: ColorDistanceFormula;\n  paletteQuantization?: PaletteQuantization;\n  colors?: number;\n}\n\nexport function buildPaletteSync(\n  images: PointContainer[],\n  {\n    colorDistanceFormula,\n    paletteQuantization,\n    colors,\n  }: BuildPaletteOptions = {},\n) {\n  const distanceCalculator =\n    colorDistanceFormulaToColorDistance(colorDistanceFormula);\n  const paletteQuantizer = paletteQuantizationToPaletteQuantizer(\n    distanceCalculator,\n    paletteQuantization,\n    colors,\n  );\n  images.forEach((image) => paletteQuantizer.sample(image));\n  return paletteQuantizer.quantizeSync();\n}\n\nexport async function buildPalette(\n  images: PointContainer[],\n  {\n    colorDistanceFormula,\n    paletteQuantization,\n    colors,\n    onProgress,\n  }: BuildPaletteOptions & ProgressOptions = {},\n) {\n  return new Promise<Palette>((resolve, reject) => {\n    const distanceCalculator =\n      colorDistanceFormulaToColorDistance(colorDistanceFormula);\n    const paletteQuantizer = paletteQuantizationToPaletteQuantizer(\n      distanceCalculator,\n      paletteQuantization,\n      colors,\n    );\n    images.forEach((image) => paletteQuantizer.sample(image));\n\n    let palette: Palette;\n    const iterator = paletteQuantizer.quantize();\n    const next = () => {\n      try {\n        const result = iterator.next();\n        if (result.done) {\n          resolve(palette);\n        } else {\n          if (result.value.palette) palette = result.value.palette;\n          if (onProgress) onProgress(result.value.progress);\n          setImmediateImpl(next);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    };\n    setImmediateImpl(next);\n  });\n}\n\nexport function applyPaletteSync(\n  image: PointContainer,\n  palette: Palette,\n  { colorDistanceFormula, imageQuantization }: ApplyPaletteOptions = {},\n) {\n  const distanceCalculator =\n    colorDistanceFormulaToColorDistance(colorDistanceFormula);\n  const imageQuantizer = imageQuantizationToImageQuantizer(\n    distanceCalculator,\n    imageQuantization,\n  );\n  return imageQuantizer.quantizeSync(image, palette);\n}\n\nexport async function applyPalette(\n  image: PointContainer,\n  palette: Palette,\n  {\n    colorDistanceFormula,\n    imageQuantization,\n    onProgress,\n  }: ApplyPaletteOptions & ProgressOptions = {},\n) {\n  return new Promise<PointContainer>((resolve, reject) => {\n    const distanceCalculator =\n      colorDistanceFormulaToColorDistance(colorDistanceFormula);\n    const imageQuantizer = imageQuantizationToImageQuantizer(\n      distanceCalculator,\n      imageQuantization,\n    );\n\n    let outPointContainer: PointContainer;\n    const iterator = imageQuantizer.quantize(image, palette);\n    const next = () => {\n      try {\n        const result = iterator.next();\n        if (result.done) {\n          resolve(outPointContainer);\n        } else {\n          if (result.value.pointContainer) {\n            outPointContainer = result.value.pointContainer;\n          }\n          if (onProgress) onProgress(result.value.progress);\n          setImmediateImpl(next);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    };\n    setImmediateImpl(next);\n  });\n}\n\nfunction colorDistanceFormulaToColorDistance(\n  colorDistanceFormula: ColorDistanceFormula = 'euclidean-bt709',\n) {\n  switch (colorDistanceFormula) {\n    case 'cie94-graphic-arts':\n      return new distance.CIE94GraphicArts();\n    case 'cie94-textiles':\n      return new distance.CIE94Textiles();\n    case 'ciede2000':\n      return new distance.CIEDE2000();\n    case 'color-metric':\n      return new distance.CMetric();\n    case 'euclidean':\n      return new distance.Euclidean();\n    case 'euclidean-bt709':\n      return new distance.EuclideanBT709();\n    case 'euclidean-bt709-noalpha':\n      return new distance.EuclideanBT709NoAlpha();\n    case 'manhattan':\n      return new distance.Manhattan();\n    case 'manhattan-bt709':\n      return new distance.ManhattanBT709();\n    case 'manhattan-nommyde':\n      return new distance.ManhattanNommyde();\n    case 'pngquant':\n      return new distance.PNGQuant();\n    default:\n      throw new Error(`Unknown colorDistanceFormula ${colorDistanceFormula}`);\n  }\n}\n\nfunction imageQuantizationToImageQuantizer(\n  distanceCalculator: AbstractDistanceCalculator,\n  imageQuantization: ImageQuantization = 'floyd-steinberg',\n) {\n  switch (imageQuantization) {\n    case 'nearest':\n      return new image.NearestColor(distanceCalculator);\n    case 'riemersma':\n      return new image.ErrorDiffusionRiemersma(distanceCalculator);\n    case 'floyd-steinberg':\n      return new image.ErrorDiffusionArray(\n        distanceCalculator,\n        image.ErrorDiffusionArrayKernel.FloydSteinberg,\n      );\n    case 'false-floyd-steinberg':\n      return new image.ErrorDiffusionArray(\n        distanceCalculator,\n        image.ErrorDiffusionArrayKernel.FalseFloydSteinberg,\n      );\n    case 'stucki':\n      return new image.ErrorDiffusionArray(\n        distanceCalculator,\n        image.ErrorDiffusionArrayKernel.Stucki,\n      );\n    case 'atkinson':\n      return new image.ErrorDiffusionArray(\n        distanceCalculator,\n        image.ErrorDiffusionArrayKernel.Atkinson,\n      );\n    case 'jarvis':\n      return new image.ErrorDiffusionArray(\n        distanceCalculator,\n        image.ErrorDiffusionArrayKernel.Jarvis,\n      );\n    case 'burkes':\n      return new image.ErrorDiffusionArray(\n        distanceCalculator,\n        image.ErrorDiffusionArrayKernel.Burkes,\n      );\n    case 'sierra':\n      return new image.ErrorDiffusionArray(\n        distanceCalculator,\n        image.ErrorDiffusionArrayKernel.Sierra,\n      );\n    case 'two-sierra':\n      return new image.ErrorDiffusionArray(\n        distanceCalculator,\n        image.ErrorDiffusionArrayKernel.TwoSierra,\n      );\n    case 'sierra-lite':\n      return new image.ErrorDiffusionArray(\n        distanceCalculator,\n        image.ErrorDiffusionArrayKernel.SierraLite,\n      );\n    default:\n      throw new Error(`Unknown imageQuantization ${imageQuantization}`);\n  }\n}\n\nfunction paletteQuantizationToPaletteQuantizer(\n  distanceCalculator: AbstractDistanceCalculator,\n  paletteQuantization: PaletteQuantization = 'wuquant',\n  colors = 256,\n) {\n  switch (paletteQuantization) {\n    case 'neuquant':\n      return new palette.NeuQuant(distanceCalculator, colors);\n    case 'rgbquant':\n      return new palette.RGBQuant(distanceCalculator, colors);\n    case 'wuquant':\n      return new palette.WuQuant(distanceCalculator, colors);\n    case 'neuquant-float':\n      return new palette.NeuQuantFloat(distanceCalculator, colors);\n    default:\n      throw new Error(`Unknown paletteQuantization ${paletteQuantization}`);\n  }\n}\n"]}